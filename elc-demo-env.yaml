AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template AuroraServerlessDBCluster: Sample template
  showing how to create an Amazon Aurora Serverless DB cluster. **WARNING** This
  template creates an Amazon Aurora DB cluster. You will be billed for the AWS
  resources used if you create a stack from this template.
Metadata:
  AWS::CloudFormation::Interface:

    ParameterGroups:
      - Label:
          default: Elasticsearch Details
        Parameters:
          - DomainName
          - DBPassword
          - SecurityGroup
      - Label:
          default: Network Details
        Parameters:
          - VPC
          - SubnetGroup

    ParameterLabels:
      DomainName:
        default: test
      DBPassword:
        default: Password
      SecurityGroup:
        default: Cloud 9 or app security group
      SubnetGroup:
        default: Subnet group for both RDS and Elasticache

Parameters:
  DomainName:
    Description: Domain name for Elasticsearch
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password SQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup::Id'
    
  VPC:
    Type: 'AWS::EC2::VPC::Id'
  
  SubnetGroup:
    Type: 'List<AWS::EC2::Subnet::Id>'

Resources:
  deliverystream:
    DependsOn:
      - deliveryPolicy
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref s3bucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt deliveryRole.Arn
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt myLambda.Arn 
              Type: Lambda 
              
  s3bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
        
  deliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

Outputs:

  DbUrl:
    Description: Url to Postgres database
    Value: !GetAtt RDSCluster.Endpoint.Address

  DbPort:
    Description: Port of Database
    Value: !GetAtt RDSCluster.Endpoint.Port
    
  ElcUrl:
    Description: Url to Redis primary
    Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address
    
  ElcPort:
    Description: Port to Redis primary
    Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Port